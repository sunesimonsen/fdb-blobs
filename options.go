package blobs

import "fmt"

// Store option type.
type Option func(store *Store) error

// Sets the chunk size used to store blobs.
//
// Defaults to 10000 bytes.
//
// Notice it is always possible to read blobs no matter what chunk size they
// were stored with, as that information is saved with the blob.
//
// The chunk size needs to be greater than zero and honour the limits of FoundationDB key value sizes.
func WithChunkSize(chunkSize int) Option {
	return func(store *Store) error {
		if chunkSize < 1 {
			return fmt.Errorf("invalid chunkSize 1 > %d", chunkSize)
		}
		store.chunkSize = chunkSize
		return nil
	}
}

// Set the number of chunks commited per transaction.
//
// Defaults to 100 chunks per transaction.
//
// The chunks per transaction needs to honour the FoundationDB transction size.
func WithChunksPerTransaction(chunksPerTransaction int) Option {
	return func(store *Store) error {
		if chunksPerTransaction < 1 {
			return fmt.Errorf("invalid chunksPerTransaction 1 > %d", chunksPerTransaction)
		}
		store.chunksPerTransaction = chunksPerTransaction
		return nil
	}
}

// Provide a system time instance, to override how timestamps are calculated.
//
// This is useful for custom timestamp calculation and for mocking.
func WithSystemTime(systemTime SystemTime) Option {
	return func(store *Store) error {
		store.systemTime = systemTime
		return nil
	}
}

// Set the id generator used to create new ids.
//
// Defaults to the [blobs.UlidIdGenerator].
//
// Notice that ids generated by the generator needs to be globally unique across
// the entire system.
func WithIdGenerator(idGenerator IdGenerator) Option {
	return func(store *Store) error {
		store.idGenerator = idGenerator
		return nil
	}
}
